# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-07-21 13:09
from __future__ import unicode_literals

import autoslug.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255, verbose_name='Vardas')),
                ('last_name', models.CharField(max_length=255, verbose_name='Pavardė')),
                ('title', models.CharField(help_text='Autoriaus profesija arba domėjimosi sritis atitinkanti citatos tekstą.', max_length=255, verbose_name='Autoriaus sritis')),
                ('photo', sorl.thumbnail.fields.ImageField(blank=True, upload_to='actors/%Y/%m/%d/', verbose_name='Nuotrauka')),
                ('group', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ActorArgumentPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.FloatField(default=0)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
            ],
        ),
        migrations.CreateModel(
            name='ActorPostPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.FloatField(default=0)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
            ],
        ),
        migrations.CreateModel(
            name='Argument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Body',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Curator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('photo', sorl.thumbnail.fields.ImageField(upload_to='actors/%Y/%m/%d/')),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Balsavimas'), (2, 'Teisės aktas')])),
                ('title', models.CharField(max_length=255, verbose_name='Pavadinimas')),
                ('source_link', models.URLField(blank=True, max_length=255, unique=True, verbose_name='Šaltinio nuoroda')),
                ('source_title', models.CharField(blank=True, max_length=255, verbose_name='Šaltinio antraštė')),
                ('timestamp', models.DateTimeField(verbose_name='Įvykio data')),
                ('position', models.FloatField()),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='title')),
                ('title', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField()),
                ('members', models.ManyToManyField(related_name='_group_members_+', related_query_name='ingroup', to='manopozicija.Actor')),
            ],
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, unique=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True)),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('update_freq', models.PositiveIntegerField(default=86400, help_text='Indicator update frequency in seconds (86400 == 1 day).')),
                ('error_count', models.PositiveIntegerField(default=0, editable=False)),
                ('traceback', models.TextField(blank=True, editable=False)),
                ('title', models.CharField(max_length=255)),
                ('ylabel', models.CharField(max_length=255)),
                ('source', models.URLField(verbose_name='Šaltinis')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('since', models.DateTimeField()),
                ('until', models.DateTimeField()),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='manopozicija.Actor')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position', models.FloatField()),
                ('approved', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField()),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('curator_upvotes', models.PositiveIntegerField(default=0)),
                ('curator_downvotes', models.PositiveIntegerField(default=0)),
                ('object_id', models.PositiveIntegerField()),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Body')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='PostArgument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('counterargument', models.BooleanField(default=False, verbose_name='Kontrargumentas')),
                ('counterargument_title', models.CharField(blank=True, max_length=255)),
                ('position', models.SmallIntegerField(default=0)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Post')),
            ],
        ),
        migrations.CreateModel(
            name='PostLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('action', models.PositiveSmallIntegerField(choices=[(1, 'balsavo')])),
                ('vote', models.SmallIntegerField(blank=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_link', models.URLField(blank=True, help_text='Nuoroda į šaltinį, apie kurį autorius kalba savo citatoje.', verbose_name='Cituojamo šaltinio nuoroda')),
                ('text', models.TextField(help_text='Citatos tekste turėtų būti išreikšta viena mintis. Stenkitės citatos tekstą išlaikyti kiek galima trumpesnį.', verbose_name='Citatos tekstas')),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.SmallIntegerField(choices=[(1, 'Balsavo'), (2, 'Teikė')])),
                ('position', models.FloatField()),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor_title', models.CharField(blank=True, help_text='Autoriaus profesija arba domėjimosi sritis atitinkanti citatos tekstą.', max_length=64, verbose_name='Autoriaus veiklos sritis')),
                ('source_link', models.URLField(max_length=255, verbose_name='Šaltinio nuoroda')),
                ('source_title', models.CharField(blank=True, max_length=255, verbose_name='Šaltinio antraštė')),
                ('timestamp', models.DateTimeField(verbose_name='Kada paskelbtas šaltinis?')),
                ('position', models.FloatField(default=0)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Actor', verbose_name='Citatos autorius')),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('since', models.DateTimeField()),
                ('until', models.DateTimeField()),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Body')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='title')),
                ('title', models.CharField(max_length=255, verbose_name='Pavadinimas')),
                ('description', models.TextField(blank=True, verbose_name='Aprašymas')),
                ('logo', sorl.thumbnail.fields.ImageField(blank=True, upload_to='topics/%Y/%m/%d/')),
                ('default_body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Body')),
                ('indicators', models.ManyToManyField(blank=True, to='manopozicija.Indicator')),
            ],
        ),
        migrations.CreateModel(
            name='TopicCurator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('approved', models.DateTimeField(blank=True, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserArgumentPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.FloatField(default=0)),
                ('argument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Argument')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPostPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.SmallIntegerField(default=0)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='quote',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Source'),
        ),
        migrations.AddField(
            model_name='quote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postargument',
            name='quote',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Quote'),
        ),
        migrations.AddField(
            model_name='postargument',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Topic'),
        ),
        migrations.AddField(
            model_name='post',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Topic'),
        ),
        migrations.AddField(
            model_name='argument',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Topic'),
        ),
        migrations.AddField(
            model_name='actorpostposition',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Post'),
        ),
        migrations.AddField(
            model_name='actorargumentposition',
            name='argument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Argument'),
        ),
        migrations.AddField(
            model_name='actor',
            name='body',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='manopozicija.Body'),
        ),
        migrations.AlterUniqueTogether(
            name='userpostposition',
            unique_together=set([('user', 'post')]),
        ),
        migrations.AlterUniqueTogether(
            name='userargumentposition',
            unique_together=set([('user', 'argument')]),
        ),
        migrations.AlterUniqueTogether(
            name='source',
            unique_together=set([('actor', 'source_link')]),
        ),
        migrations.AlterUniqueTogether(
            name='post',
            unique_together=set([('topic', 'content_type', 'object_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='argument',
            unique_together=set([('topic', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='actorpostposition',
            unique_together=set([('actor', 'post')]),
        ),
        migrations.AlterUniqueTogether(
            name='actorargumentposition',
            unique_together=set([('actor', 'argument')]),
        ),
    ]
